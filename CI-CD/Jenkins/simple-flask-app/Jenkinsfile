pipeline {
    agent any
    
    environment {
        FLASK_APP = 'app.py'
        FLASK_ENV = 'development'
    }

    stages {
        stage('Build') {
            steps {
                git 'https://github.com/suyog-devops/simple-flask-app.git'
                echo "Checkout content is - "
                sh 'ls'
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    echo "Setting up virtual environment and installing dependencies..."
                    // Create and activate the virtual environment, then install dependencies
                    sh '''
                    if [ ! -d "venv" ]; then
                        python3 -m venv venv  # Create virtual environment if not exists
                    fi
                    . venv/bin/activate   # Activate the virtual environment
                    pip install -r requirements.txt  # Install from requirements.txt
                    // pip install pytest  # Install pytest
                    // echo "Checking pytest location:"
                    // which pytest  # This should return the path to pytest in the virtual environment
                    '''
                }
            }
        }

        stage('Run App') {
            steps {
                script {
                    echo "Running the app..."
                    // Run the Flask app in the background and ensure it starts
                    sh '''
                    . venv/bin/activate  # Re-activate the virtual environment
                    nohup python3 ${FLASK_APP} &  # Run the Flask app in the background
                    '''
                    // Wait for the app to be ready
                    echo "Waiting for the Flask app to start..."
                    sh '''
                    curl --max-time 10 http://127.0.0.1:5000/ || exit 1  # Timeout after 10 seconds
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo "Running unit tests..."
                    // Ensure pytest is run from within the virtual environment
                    sh '''
                    . venv/bin/activate  # Re-activate the virtual environment
                    pytest test-app.py  # Run pytest
                    '''
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    echo "Cleaning up..."
                    sh 'deactivate'  // Deactivate virtual environment
                }
            }
        }
    }
}
